{"version":3,"file":"app_config_webhook.js","sourceRoot":"","sources":["../../../../../../src/cli/models/extensions/specifications/validation/app_config_webhook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,GAAG,EAAC,MAAM,8BAA8B,CAAA;AAGhD,MAAM,UAAU,gBAAgB,CAAC,MAAc,EAAE,GAAsB;IACrE,MAAM,yBAAyB,GAAG,qBAAqB,CAAC,MAAwB,CAAC,CAAA;IAEjF,IAAI,yBAAyB,EAAE;QAC7B,GAAG,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAA;QACvC,OAAO,GAAG,CAAC,KAAK,CAAA;KACjB;AACH,CAAC;AAED,SAAS,qBAAqB,CAAC,aAA6B;IAC1D,MAAM,EAAC,aAAa,GAAG,EAAE,EAAC,GAAG,aAAa,CAAA;IAC1C,MAAM,qBAAqB,GAAG,IAAI,GAAG,EAAE,CAAA;IACvC,MAAM,+BAA+B,GAAG,IAAI,GAAG,EAAE,CAAA;IAEjD,IAAI,CAAC,aAAa,CAAC,MAAM;QAAE,OAAM;IAEjC,gEAAgE;IAChE,KAAK,MAAM,CAAC,CAAC,EAAE,EAAC,GAAG,EAAE,MAAM,EAAE,iBAAiB,GAAG,EAAE,EAAE,SAAS,GAAG,EAAE,EAAC,CAAC,IAAI,aAAa,CAAC,OAAO,EAAE,EAAE;QAChG,MAAM,IAAI,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC,CAAA;QAEjC,KAAK,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;YACzC,MAAM,GAAG,GAAG,GAAG,KAAK,KAAK,SAAS,KAAK,GAAG,EAAE,CAAA;YAE5C,IAAI,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAClC,OAAO;oBACL,IAAI,EAAE,GAAG,CAAC,YAAY,CAAC,MAAM;oBAC7B,OAAO,EAAE,8EAA8E;oBACvF,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,CAAC;iBACpC,CAAA;aACF;YAED,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SAC/B;QAED,KAAK,MAAM,CAAC,CAAC,EAAE,eAAe,CAAC,IAAI,iBAAiB,CAAC,OAAO,EAAE,EAAE;YAC9D,MAAM,GAAG,GAAG,GAAG,eAAe,KAAK,GAAG,EAAE,CAAA;YAExC,IAAI,+BAA+B,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC5C,OAAO;oBACL,IAAI,EAAE,GAAG,CAAC,YAAY,CAAC,MAAM;oBAC7B,OAAO,EAAE,qFAAqF;oBAC9F,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,mBAAmB,EAAE,CAAC,EAAE,eAAe,CAAC;iBACzD,CAAA;aACF;YAED,+BAA+B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SACzC;KACF;AACH,CAAC","sourcesContent":["import {zod} from '@shopify/cli-kit/node/schema'\nimport type {WebhooksConfig} from '../types/app_config_webhook.js'\n\nexport function webhookValidator(schema: object, ctx: zod.RefinementCtx) {\n  const webhookSubscriptionErrors = validateSubscriptions(schema as WebhooksConfig)\n\n  if (webhookSubscriptionErrors) {\n    ctx.addIssue(webhookSubscriptionErrors)\n    return zod.NEVER\n  }\n}\n\nfunction validateSubscriptions(webhookConfig: WebhooksConfig) {\n  const {subscriptions = []} = webhookConfig\n  const uniqueSubscriptionSet = new Set()\n  const uniqueComplianceSubscriptionSet = new Set()\n\n  if (!subscriptions.length) return\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  for (const [i, {uri, topics, compliance_topics = [], sub_topic = ''}] of subscriptions.entries()) {\n    const path = ['subscriptions', i]\n\n    for (const [j, topic] of topics.entries()) {\n      const key = `${topic}::${sub_topic}::${uri}`\n\n      if (uniqueSubscriptionSet.has(key)) {\n        return {\n          code: zod.ZodIssueCode.custom,\n          message: 'You can’t have duplicate subscriptions with the exact same `topic` and `uri`',\n          fatal: true,\n          path: [...path, 'topics', j, topic],\n        }\n      }\n\n      uniqueSubscriptionSet.add(key)\n    }\n\n    for (const [j, complianceTopic] of compliance_topics.entries()) {\n      const key = `${complianceTopic}::${uri}`\n\n      if (uniqueComplianceSubscriptionSet.has(key)) {\n        return {\n          code: zod.ZodIssueCode.custom,\n          message: 'You can’t have duplicate privacy compliance subscriptions with the exact same `uri`',\n          fatal: true,\n          path: [...path, 'compliance_topics', j, complianceTopic],\n        }\n      }\n\n      uniqueComplianceSubscriptionSet.add(key)\n    }\n  }\n}\n"]}