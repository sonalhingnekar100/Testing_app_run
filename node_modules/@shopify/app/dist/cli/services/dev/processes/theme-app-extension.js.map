{"version":3,"file":"theme-app-extension.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/processes/theme-app-extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseProcess, DevProcessFunction} from './types.js'\nimport {ExtensionInstance} from '../../../models/extensions/extension-instance.js'\nimport {HostThemeManager} from '../../../utilities/host-theme-manager.js'\nimport {themeExtensionArgs} from '../theme-extension-args.js'\nimport {execCLI2} from '@shopify/cli-kit/node/ruby'\nimport {useEmbeddedThemeCLI} from '@shopify/cli-kit/node/context/local'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\nimport {\n  AdminSession,\n  ensureAuthenticatedAdmin,\n  ensureAuthenticatedPartners,\n  ensureAuthenticatedStorefront,\n} from '@shopify/cli-kit/node/session'\n\n// Tokens may be invalidated after as little as 4 minutes, better to be safe and refresh every 3 minutes\nconst PARTNERS_TOKEN_REFRESH_TIMEOUT_IN_MS = 3 * 60 * 1000\n\nexport interface PreviewThemeAppExtensionsOptions {\n  adminSession: AdminSession\n  themeExtensionServerArgs: string[]\n  storefrontToken: string\n  token: string\n}\n\nexport interface PreviewThemeAppExtensionsProcess extends BaseProcess<PreviewThemeAppExtensionsOptions> {\n  type: 'theme-app-extensions'\n}\n\nexport const runThemeAppExtensionsServer: DevProcessFunction<PreviewThemeAppExtensionsOptions> = async (\n  {stdout, stderr, abortSignal},\n  {adminSession, themeExtensionServerArgs: args, storefrontToken},\n) => {\n  const refreshSequence = (attempt = 0) => {\n    outputDebug(`Refreshing partners token (attempt ${attempt})...`, stdout)\n    refreshToken()\n      .then(() => {\n        outputDebug('Refreshed partners token successfully', stdout)\n      })\n      .catch((error) => {\n        outputDebug(`Failed to refresh partners token: ${error}`, stderr)\n        if (attempt < 3) {\n          // Retry after 30 seconds. Sometimes we see random ECONNREFUSED errors\n          // so let's let the network sort itself out and retry.\n          setTimeout(() => refreshSequence(attempt + 1), 30 * 1000)\n        } else {\n          throw error\n        }\n      })\n  }\n  setInterval(refreshSequence, PARTNERS_TOKEN_REFRESH_TIMEOUT_IN_MS)\n\n  await refreshToken()\n  await execCLI2(['extension', 'serve', ...args], {\n    store: adminSession.storeFqdn,\n    adminToken: adminSession.token,\n    storefrontToken,\n    stdout,\n    stderr,\n    signal: abortSignal,\n  })\n}\n\nexport async function setupPreviewThemeAppExtensionsProcess({\n  allExtensions,\n  apiKey,\n  storeFqdn,\n  theme,\n  themeExtensionPort,\n  notify,\n  token,\n}: Pick<PreviewThemeAppExtensionsOptions, 'token'> & {\n  allExtensions: ExtensionInstance[]\n  apiKey: string\n  storeFqdn: string\n  theme?: string\n  notify?: string\n  themeExtensionPort?: number\n}): Promise<PreviewThemeAppExtensionsProcess | undefined> {\n  const themeExtensions = allExtensions.filter((ext) => ext.isThemeExtension)\n  if (themeExtensions.length === 0) {\n    return\n  }\n\n  const adminSession = await ensureAuthenticatedAdmin(storeFqdn)\n  const extension = themeExtensions[0]!\n  let optionsToOverwrite = {}\n  if (!theme) {\n    const theme = await new HostThemeManager(adminSession).findOrCreate()\n    optionsToOverwrite = {\n      theme: theme.id.toString(),\n      generateTmpTheme: true,\n    }\n  }\n  const [storefrontToken, args] = await Promise.all([\n    ensureAuthenticatedStorefront(),\n    themeExtensionArgs(extension, apiKey, token, {\n      theme,\n      themeExtensionPort,\n      notify,\n      ...optionsToOverwrite,\n    }),\n  ])\n\n  return {\n    type: 'theme-app-extensions',\n    prefix: 'extensions',\n    function: runThemeAppExtensionsServer,\n    options: {\n      adminSession,\n      themeExtensionServerArgs: args,\n      storefrontToken,\n      token,\n    },\n  }\n}\n\nasync function refreshToken() {\n  const newToken = await ensureAuthenticatedPartners([], process.env, {noPrompt: true})\n  if (useEmbeddedThemeCLI()) {\n    await execCLI2(['theme', 'token', '--partners', newToken])\n  }\n}\n"]}